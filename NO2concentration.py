# -*- coding: utf-8 -*-
"""ıntroToTheMLHMW.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s_FSKS8mxkNvcKI_tIDPvJtKeH8KkY8X
"""

from google.colab import drive
drive.mount('/content/drive/')

data = '/content/drive/MyDrive/images/no2.csv'

import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import pandas as pd
import requests
import plotly.express as px
import plotly.graph_objects as pgo
from scipy.io import arff


import sklearn
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error
from sklearn.metrics import mean_squared_error,r2_score
from sklearn.linear_model import Ridge, Lasso
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.linear_model import RidgeCV, LassoCV


link = arff.loadarff('/content/drive/MyDrive/images/no2.arff')
link

df = pd.read_csv('/content/drive/MyDrive/images/no2.csv')
df

"""Başka şekillerde de yazdırabilirdim"""

#import scipy.io from
#data = arff.loadarff('/content/drive/MyDrive/images/no2.arff')
#df = pd.DataFrame(data[0])

#headtail = df.head().append()
'''
print(link.head(500))
print(link.describe())
'''

# Commented out IPython magic to ensure Python compatibility.
from ast import increment_lineno

from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from pylab import rcParams
from matplotlib import rc

import unittest
# %matplotlib inline

sns.set(style='darkgrid', palette='bright', font_scale=1.8)

rcParams['figure.figsize'] = 20, 8
no2 = pd.read_csv('/content/drive/MyDrive/images/no2.csv')
no2['no2_concentration'].describe()

"""'''
RANDOM_SEED = 60
np.random.seed(RANDOM_SEED)

def run_tests():
  unittest.main(argv=[''], verbosity=1, exit=False)
'''
"""

sns.distplot(no2['no2_concentration']);

sns.distplot(no2['cars_per_hour']);

var = 'cars_per_hour'
data = pd.concat([no2['no2_concentration'], no2[var]], axis = 1)
data.plot.scatter(x=var, y='no2_concentration', ylim=(0,7), s=100);

from seaborn.palettes import dark_palette
plt.figure(figsize=(20,7))
sns.regplot(x=df['cars_per_hour'], y=df['no2_concentration'])
plt

sns.distplot(no2['temperature_at_2m']);

var = 'temperature_at_2m'
data = pd.concat([no2['no2_concentration'], no2[var]], axis=1)
data.plot.scatter(x=var, y='no2_concentration', ylim=(0,7), s = 100);

from seaborn.palettes import dark_palette
plt.figure(figsize=(20,7))
sns.regplot(x=df['temperature_at_2m'], y=df['no2_concentration'])
plt

sns.distplot(no2['wind_speed']);

var = 'temperature_diff_2m_25m'
data = pd.concat([no2['no2_concentration'], no2[var]], axis = 1)
data.plot.scatter(x=var, y='no2_concentration', ylim=(0,7), s=80);

from seaborn.palettes import dark_palette
plt.figure(figsize=(20,7))
sns.regplot(x=df['temperature_diff_2m_25m'], y=df['no2_concentration'])
plt

"""Bazı sonuçlar tatmin edici olmayabileceğinden dolayı 4 farklı yöntemle çizdirme işlemi uyguluyorum."""

sns.distplot(no2['temperature_diff_2m_25m']);

var = 'temperature_diff_2m_25m'
data = pd.concat([no2['no2_concentration'], no2[var]], axis=1)
f, ax = plt.subplots(figsize=(40, 20))
fig = sns.boxplot(x=var, y="no2_concentration", data=data)
fig.axis(ymin=0, ymax=7);

var = 'wind_direction'
data = pd.concat([no2['no2_concentration'], no2[var]], axis = 1)
data.plot.scatter(x=var, y='no2_concentration', ylim=(0,7), s=50);

var = 'hour_of_day'
data = pd.concat([no2['no2_concentration'], no2[var]], axis = 1)
data.plot.scatter(x=var, y='no2_concentration', ylim=(0,7), s=50);

from seaborn.palettes import dark_palette
plt.figure(figsize=(20,7))
sns.regplot(x=df['hour_of_day'], y=df['no2_concentration'])
plt

var = 'day'
data = pd.concat([no2['no2_concentration'], no2[var]], axis = 1)
data.plot.scatter(x=var, y='no2_concentration', ylim=(0,7), s=50);

var = 'day'
data = pd.concat([no2['no2_concentration'], no2[var]], axis=1)
f, ax = plt.subplots(figsize=(200, 20))
fig = sns.boxplot(x=var, y="no2_concentration", data=data)
fig.axis(ymin=0, ymax=7);

names = ['no2_concentration',
          'cars_per_hour',
            'temperature_at_2m',
              'wind_speed',
                'temperature_diff_2m_25m',
                  'wind_direction',
                    'hour_of_day',
                      'day']
sns.pairplot(no2[names], size = 8);

names = ['no2_concentration',
          'cars_per_hour',
            'temperature_at_2m',
              'wind_speed'
                      ]
sns.pairplot(no2[names], size = 4);

names = [ 'temperature_diff_2m_25m',
            'wind_direction',
               'hour_of_day',
                 'day']
sns.pairplot(no2[names], size = 4);

fig = px.scatter(df, x= 'cars_per_hour',y='no2_concentration', trendline='ols')
fig

'''train['temperature_diff_2m_25m'].fillna((train['temperature_diff_2m_25m'].mean()), inplace = True)
train['day' ].fillna((train['day'].mean()), inplace = True)
train'''

"""train test oranlarını 80'e 20 yaptım"""

df_train, df_test = train_test_split(df, train_size = 0.80,test_size = 0.20, random_state = 10)
print(len(df_train))
print(len(df_test))

x_train = df_train[names]
x_train = x_train.values.reshape(-1, 1)
y_train = df_train['no2_concentration']

x_test = df_test[names]
x_test = x_test.values.reshape(-1, 1)
y_test = df_test['no2_concentration']

y = df['no2_concentration']
x = df[['cars_per_hour',
          'temperature_at_2m',
            'wind_speed',
              'temperature_diff_2m_25m',
                'wind_direction',
                  'hour_of_day',
                     'day']]
x_train, x_test, y_train, y_test = train_test_split(x, y)
lr = LinearRegression()
lr.fit(x_train, y_train)
lr.intercept_
lr.coef_

feature_names = x.columns
coef_of_model = lr.coef_
coef_df = pd.DataFrame(data =
                        coef_of_model,
                           index = feature_names,
                              columns = ['-Coefficients-'])
print(coef_df)

y_event = lr.predict(x_test)
sonuc = pd.DataFrame({'Actual': y_test, 'Estimated': y_event})
print(sonuc)

"""R karenin değeri her zaman 0 ile 1 arasındadır, burada 0, modelin hedef değişkenindeki(Y) herhangi bir değişkenliği açıklamadığı anlamına gelir ve 1 değeri ise model hedef değişkeni tam olarak açıkladığı anlamına gelmektedir. Şimdi gelin R Square'i kontrol edelim,"""

mae = mean_absolute_error(y_test, y_event)
mse = mean_squared_error(y_test, y_event)
rmse = np.sqrt(mse)

actual_minus_estimated = sum((y_test - y_event)**2)
actual_minus_actual_mean = sum((y_test - y_test.mean())**2)
r2 = 1 - actual_minus_estimated/actual_minus_actual_mean
print('R²:', r2)

result_of_test = lr.score(x_test, y_test)
result_of_train = lr.score(x_train, y_train)
print("Result of Linear test score  : ", result_of_test)
print("Result of Linear train score : ",result_of_train)

names = no2.columns[1:8]
lr = LinearRegression()
lr.fit(x_train, y_train)
actual = y_test

print("Train score for Linear model = {}".format(result_of_train))
print("\b | \t Test score for Linear model = {}".format(result_of_test))

ridgeReg = Ridge(alpha=10)
ridgeReg.fit(x_train,y_train)
train_score_ridge = ridgeReg.score(x_train, y_train)
test_score_ridge = ridgeReg.score(x_test, y_test)

print("\n")
print("Train score for Ridge model = {}".format(train_score_ridge))
print("\b  | \t Test score for Ridge model = {}".format(test_score_ridge))

plt.figure(figsize = (20, 10))
plt.plot(names,
          ridgeReg.coef_,
            alpha=5,
              linestyle='dashed',
                marker='+',
                  markersize=10,
                    color='black')
plt.plot(names,
          lr.coef_,
            alpha=5,
              linestyle='dashdot',
                marker='*',
                  markersize=10,
                    color='purple')
plt.title("The purple ones are Linear | Black ones are Ridge")
plt.xticks(rotation = 45)

ls = Lasso(alpha = 0.05)
ls.fit(x_train,y_train)
ls_train =ls.score(x_train,y_train)
ls_test =ls.score(x_test,y_test)

print("Train score for Lasso model = {}".format(ls_train))
print("Test score for Lasso model = {}".format(ls_test))

pd.Series(ls.coef_, names).sort_values(ascending = True).plot(kind = "bar", color ='purple')
pd.Series(ls.coef_, names).sort_values(ascending = True).plot(kind = "line", color ='black')
plt.xticks(rotation = 45)

lasso_cv = LassoCV(alphas = [0.005,0.05, 0.5, 5], random_state=0).fit(x_train, y_train)
print(lasso_cv.score(x_train, y_train))
print(lasso_cv.score(x_test, y_test))

plt.figure(figsize = (20, 10))
plt.plot(names,
          ridgeReg.coef_,
            alpha=5,
              linestyle='solid',
                marker='+',
                  markersize=5,
                    color='black',
                      label=r'Ridge')
plt.plot(lasso_cv.coef_,
          alpha=5,
            linestyle='dotted',
              marker='*',
                markersize=5,
                  color='purple',
                    label=r'Lasso')
plt.plot(names,
          lr.coef_,
            alpha=5,
              linestyle='dashdot',
                marker='o',
                  markersize = 5,
                    color='orange',
                      label='Linear')

plt.title("Comparison of - Ridge | Lasso | Linear - Regression models")
plt.legend()
plt.xticks(rotation = 45)

ridge_cv = RidgeCV(alphas = [0.005,0.05, 0.5, 5]).fit(x_train, y_train)
print("Train score for ridge model = {}".format(ridge_cv.score(x_train, y_train)))
print("Train score for ridge model = {}".format(ridge_cv.score(x_test, y_test)))

"""formülleri içeren araştırma dosyama link üzerinden erişebilirsiniz

https://drive.google.com/file/d/1OGHrTX9nISaHZbV_ifMXrOJshlTddX50/view?usp=sharing

ekleyebilirim diye düşündüklerim :
"""

np.nanmean(matrisiceriginesahipdef, axis=0)